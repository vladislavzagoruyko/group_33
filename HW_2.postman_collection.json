{
	"info": {
		"_postman_id": "3bb34280-8bec-4a72-ac84-f35769e8d289",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19670525"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "usrer_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"let name = jsonData.name\r",
							"let age = jsonData.age\r",
							"let salary = jsonData.salary\r",
							"let family = jsonData.family\r",
							"let salary_1_5 = jsonData.family.u_salary_1_5_year\r",
							"//console.log(\"salary --\", salary)\r",
							"\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Current name\", function () {\r",
							"    pm.expect(name).to.eql(\"Vadik\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Current age\", function () {\r",
							"    pm.expect(age).to.eql(\"36\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Current salary\", function () {\r",
							"    pm.expect(salary).to.eql(120000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data;\r",
							"\r",
							"let req_name = req.name\r",
							"let req_age = req.age;\r",
							"let req_salary = Number(req.salary);\r",
							"let req_salary_1_5 = req.salary * 4;\r",
							"//console.log(\"req_salary --\", req_salary)\r",
							"// console.log(\"req_salary_1_5 --\", req_salary*4)\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Correct req_name\", function () {\r",
							"    pm.expect(name).to.eql(req_name);\r",
							"});\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Correct req_age\", function () {\r",
							"    pm.expect(age).to.eql(req_age);\r",
							"});\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Correct req_salary\", function () {\r",
							"    pm.expect(salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(\"family --\", family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Salary_1_5\", function () {\r",
							"    pm.expect(salary_1_5).to.eql(req_salary_1_5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"let resp_name = jsonData.name;\r",
							"let resp_age = jsonData.age;\r",
							"let resp_salary = String(jsonData.salary);\r",
							"let resp_family = jsonData.family;\r",
							"let resp_dog = jsonData.family.pets.dog;\r",
							"let resp_name_dog= jsonData.family.pets.dog.name;\r",
							"let resp_age_dog = jsonData.family.pets.dog.age;\r",
							"//console.log(\"salary --\", salary)\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var req_data = pm.request.url.query.toObject();\r",
							"\r",
							"let req_name = req_data.name\r",
							"let req_age = req_data.age\r",
							"let req_salary = req_data.salary\r",
							"//let req_family = req.family\r",
							"//let req_dog = req.family.pets.dog\r",
							"//let req_name_dog= req.family.pets.dog.name\r",
							"//let req_age_dog = req.family.pets.dog.age\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Correct name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_data.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Correct age\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_data.age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Correct salary\", function () {\r",
							"    pm.expect(resp_salary).to.eql(req_data.salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(\"family --\", resp_family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog name\", function () {\r",
							"    pm.expect(JSON.stringify(resp_dog)).to.include(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog age\", function () {\r",
							"    pm.expect(JSON.stringify(resp_dog)).to.include(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Correct name\", function () {\r",
							"    pm.expect(JSON.stringify(resp_name_dog)).to.include(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Correct age\", function () {\r",
							"    pm.expect(JSON.stringify(resp_age_dog)).to.eql(\"4\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?age=36&name=Vadik&salary=120000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "36"
						},
						{
							"key": "name",
							"value": "Vadik"
						},
						{
							"key": "salary",
							"value": "120000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"let resp_name = jsonData.name;\r",
							"let resp_age = jsonData.age;\r",
							"let resp_salary = String(jsonData.salary);\r",
							"//let resp_family = jsonData.family;\r",
							"//let resp_dog = jsonData.family.pets.dog;\r",
							"//let resp_name_dog= jsonData.family.pets.dog.name;\r",
							"//let resp_age_dog = jsonData.family.pets.dog.age;\r",
							"//console.log(\"salary --\", salary)\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var req_data = pm.request.url.query.toObject();\r",
							"\r",
							"let req_name = req_data.name\r",
							"let req_age = req_data.age\r",
							"let req_salary = req_data.salary\r",
							"\r",
							"let param = jsonData.salary;\r",
							"//console.log(\"param --\", param);\r",
							"//let req_family = req.family\r",
							"//let req_dog = req.family.pets.dog\r",
							"//let req_name_dog= req.family.pets.dog.name\r",
							"//let req_age_dog = req.family.pets.dog.age\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Correct name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_data.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Correct age\", function () {\r",
							"    pm.expect(JSON.stringify(resp_age)).to.eql(req_data.age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request\r",
							"console.log(\"request_salary --\", req_salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"responce_salary --\", resp_salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(\"param_0 --\", param[0]);\r",
							"\r",
							"// 10 Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"param_1 --\", param[1]);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"param_2 --\", param[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Correct_param_0\", function () {\r",
							"    pm.expect(JSON.stringify(param[0])).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Correct_param_1\", function () {\r",
							"    pm.expect(param[1]).to.eql(String(req_salary*2));\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Correct_param_2\", function () {\r",
							"    pm.expect(param[2]).to.eql(String(req_salary*3));\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", req_name);\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", req_age);\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", req_salary);\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.get(\"name\");\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.get(\"age\");\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.get(\"salary\");\r",
							"\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"for (let i=0; i<3; i++){\r",
							"    console.log (req_salary[i]);\r",
							"};\r",
							"\r",
							"param.forEach(element => console.log(element));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?age=36&name=Vadik&salary=120000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "36"
						},
						{
							"key": "name",
							"value": "Vadik"
						},
						{
							"key": "salary",
							"value": "120000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//pm.test(\"Body matches string\", function () {\r",
							"    //pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"//});\r",
							"\r",
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"let start_salary = jsonData.start_qa_salary;\r",
							"let after_6_months = jsonData.qa_salary_after_6_months;\r",
							"let after_12_months = jsonData.qa_salary_after_12_months;\r",
							"let after_18_months = jsonData['qa_salary_after_1.5_year'];\r",
							"let after_42_months = jsonData['qa_salary_after_3.5_years'];\r",
							"let person_u_age = jsonData.person.u_age\r",
							"let person_u_name = jsonData.person.u_name\r",
							"let person_u_salary_5_years = jsonData.person.u_salary_5_years\r",
							"\r",
							"\r",
							"// Спарсить request.\r",
							"let req = request.data;\r",
							"\r",
							"let req_salary = req.salary\r",
							"let req_age = req.age\r",
							"\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check_1\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check_2\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check_3\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check_4\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check_5\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check_6\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"person\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Correct start salary\", function () {\r",
							"    pm.expect(String(start_salary)).to.eql(req.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Correct salary_after_6_months\", function () {\r",
							"    pm.expect(after_6_months).to.eql(req_salary*2);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Correct salary_after_12_months\", function () {\r",
							"    pm.expect(after_12_months).to.eql(req_salary*2.7);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Correct salary_after_1.5_year\", function () {\r",
							"    pm.expect(after_18_months).to.eql(req_salary*3.3);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Correct salary_after_3.5_years\", function () {\r",
							"    pm.expect(after_42_months).to.eql(req_salary*3.8);\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Person salary\", function () {\r",
							"    pm.expect(String(person_u_name[1])).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Person age\", function () {\r",
							"    pm.expect(String(person_u_age)).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Person salary_5_years\", function () {\r",
							"    pm.expect(person_u_salary_5_years).to.eql(req_salary*4.2);\r",
							"});\r",
							"\r",
							"\r",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let param = jsonData.person;\r",
							"Object.entries(param).forEach(([key, value]) => console.log(key, ':', value));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}